

<!-- End Header  --><!-- Full Calendar  -->
   <!--<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.4/index.global.min.js'></script>-->
   <script src='https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@6.1.15/index.global.min.js'></script>
 <script>
 document.addEventListener('turbo:load', function() {
  var calendarEl = document.getElementById('calendar');

    // Check if a calendar is already initialized and destroy it
  if (calendarEl && calendarEl.fullCalendarInstance) {
    calendarEl.fullCalendarInstance.destroy();
    delete calendarEl.fullCalendarInstance;
  }

  var calendar = new FullCalendar.Calendar(calendarEl, {  
    eventSources: [
      {
        url: '<%= account_team_schedule_json_path(team_id: current_team.id, format: :json) %>', 
        extraParams: {
          retreat: '<%= @retreat.id %>',
        },
        success: function(data) {
          var events = data.map(function(item) {
            return {
              id: item.id,
              title: item.name,
              start: item.start_time,
              end: item.end_time,
              allDay: false
            };
          });
          return events;
        },
        error: function(error) {
          console.error('Error fetching events:', error);
        }
      }
    ],
    <% days = (@retreat.departure.in_time_zone("America/Los_Angeles").to_date - @retreat.arrival.in_time_zone("America/Los_Angeles").to_date).to_i + 1 %>
    initialView: '<%= days < 7 ? 'timeGridFlex' : 'timeGridWeek' %>', 
    views: {
      timeGridFlex: {
        type: 'timeGrid',
        duration: { days: <%= days %> }
      }
    },
    initialDate: '<%= @retreat.arrival.in_time_zone("America/Los_Angeles").strftime("%Y-%m-%d") %>',
    slotMinTime: '06:00:00',
    slotMaxTime: '23:00:00',
    slotDuration: '00:30:00',
    height: "auto",
    editable: true,  // Allow dragging and resizing
    droppable: false,
    schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
    headerToolbar: {
      start: '',
      center: 'title',
      <% if days > 7 %>
      end: 'prev,next today'
      <% end %>
    },
    eventTimeFormat: {
      hour: '2-digit',
      minute: '2-digit',
      meridiem: true
    },

       // Callback to modify the event appearance based on its title


     eventDidMount: function(info) {
      if (/Breakfast|Lunch|Dinner/.test(info.event.title)) {
        info.el.style.backgroundColor = "#FFA500"; // Gold color
        info.el.style.borderColor = "#FFA500";
        info.el.style.color = "#000000"; // Optional: change text color
      }
      else if (info.event.title.includes("Gathering")) {
        info.el.style.backgroundColor = "#0000FF"; // Gold color
        info.el.style.borderColor = "#0000FF";
        info.el.style.color = "#FFFFFF"; // Optional: change text color
      }
      else if (info.event.title.includes("Free Time")) {
        info.el.style.backgroundColor = "#FF00FF"; // Gold color
        info.el.style.borderColor = "#FFA500";
        info.el.style.color = "#FFFFFF"; // Optional: change text color
      }

    },

    eventDrop: function(info) {
      var event = info.event;
      var end = event.end ? event.end.toISOString() : null;

      // Log the event data before sending it
      console.log('Updating event:', {
        id: event.id,
        reservation: event.id,
        start: event.start.toISOString(),
        end: end
      });

      fetch('<%= account_team_fullcalendar_update_url(team_id: current_team.id) %>', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          id: event.id,
          reservation: event.id,
          start: event.start.toISOString(),
          end: end
        })
      }).then(response => response.json())
      .then(data => {
        console.log('Event updated successfully', data);
      }).catch(error => {
        console.error('Error updating event:', error);
      });
    },

    eventResize: function(info) {
      var event = info.event;

      // Log the resize data before sending it
      console.log('Resizing event:', {
        id: event.id,
        reservation: event.id,
        start: event.start.toISOString(),
        end: event.end.toISOString()
      });

      fetch('<%= account_team_fullcalendar_update_url(team_id: current_team.id) %>', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          id: event.id,
          reservation: event.id,
          start: event.start.toISOString(),
          end: event.end.toISOString()
        })
      }).then(response => response.json())
      .then(data => {
        console.log('Event resized successfully', data);
      }).catch(error => {
        console.error('Error resizing event:', error);
      });
    }
  });

  calendar.render();
});


</script>


  
<!-- End Full Calendar -->
<div class="container mx-auto grid grid-cols-1 lg:grid-cols-1 gap-4">
  <div class="col-span-1 flex flex-col bg-white border-2 p-4 rounded-lg">
    <div id='calendar'></div>
  </div>
</div>  
